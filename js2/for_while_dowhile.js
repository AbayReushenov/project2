'use strict';
// если написать
//const = 50;
//программа не будет работать
let num = 50;

while (num < 55) {
    console.log(num);
    num++; // +1, +1, +1 
} //  без ";""

let num = 50;
do {
    console.log(num);
    num++; // +1, +1, +1 
}  //  без ";""
while (num <= 56);

for (let i = 1; i < 8;  i++)  { // цикл, переменная i =1 , далее условие : работает до i = 8 , после выполнения увеличивается на 1 ед.: i++
    console.log(i);
}   //  без ";"" */

let num2 = 50; 
for (let i = 1; i < 8;  i++)  { // исполняется 7 раз, независимо что у num2 нет ограничений на увеличение
    // если будет условие : i < 0
    // for (let i = 1; i < 0;  i++)  { 
    // то цикл будет бесконечен
    console.log(num2);
    num2++;
} //  без ";"" */

for (let i = 1; i < 10;  i++)  { 
    if (i===6) {
        break; // прерывание цикла
        // если i = 6 то цикл прервется
        // независимо что есть другие условия
        // на выходе будет:
            /*  1
                2
                3
                4
                5 */
    }
    console.log(i);
}   //  без ";"" */

for (let i = 1; i < 10;  i++)  { 
    if (i===6) {
        continue;
        // i = 6 
        //  будет пропущен
         /* 1
            2
            3
            4
            5
            7
            8
            9 */

    }
    console.log(i);
}   //  без ";"" */

// -------------------
/* Цикл for 
Цикл for  повторяет действия, пока не произойдёт какое-либо специальное событие завершения цикла. 

for ([начало]; [условие]; [шаг]) выражения

При его выполнении происходит следущее:

Выполняется выражение начало, если оно указано. 

Это выражение обычно инициализирует один или несколько счётчиков, но синтаксис позволяет выражению быть любой сложности. Также используется для объявления переменных.

Выполняется условие. Если условие истинно, то выполняются выражения. Если оно ложно, цикл for прерывается. Если же условие полностью пропущено, то оно считается истинным.

Выполняются выражения. Чтобы выполнить несколько выражений, используются блок-выражение  { ... }  для группировки выражений.

Обновляется шаг, если он есть, а затем управление возвращается к шагу 2. */
/* 
Цикл do...while 
Цикл do...while повторяется пока заданное условие истинно. Оператор do...while имеет вид:

    do
     выражения
    while (условие);
выражения выполняются пока условие истинно. Чтобы использовать несколько выражений, используйте блок-выражение  { ... }, чтобы сгруппировать их. Если условие истинно, выражения выполнятся снова. В конце каждого прохода условие проверяется. Если условие ложно, выполнение приостанавливается и управление передаётся выражению после do...while.

Пример
В следующем примере, цикл do выполнится минимум 1 раз и запускается снова, пока i меньше 5.
 */
//ниже пример при котором цикл выполняется как минимум 1 раз
//в зависимости от начального значения i
let i =6;
do {
  i += 1;
  console.log(i);
} while (i < 5);

/* Цикл while
Цикл while выполняет выражения пока условие истинно. Выглядит он так:

    while (условие)
        выражения


Если условие становится ложным, выражения в цикле перестают выполняться и управление переходит к выражению после цикла.

Условие проверяется на истинность до того, как выполняются выражения в цикле. 
Если условие истинно, выполняются выражения, а затем условие проверяется снова.
 Если условие ложно, выполнение приостанавливается и управление переходит к выражению после while.
 Чтобы использовать несколько выражений, используйте блок выражение { ... }, чтобы сгруппировать их. */

var n = 0;
var x = 0;
while (n < 3) {
  n++;
  x += n;
  console.log(n,x);
   /*   1 1
        2 3
        3 6 */
}
/* Избегайте бесконечных циклов. Убедитесь, что условие цикла в итоге станет ложным; иначе, цикл никогда не прервётся. Выражения в следующем цикле while будут выполняться вечно, т.к. условие никогда не станет ложным:
 */
while (true) {
  console.log("Hello, world");
}

/*
Метка (label)
Метка представляет собой оператор с индентификатором, который позволяет вам ссылаться на какое-то место в вашей программе. Например, вы можете использовать метку, чтобы обозначить цикл, а затем использовать операторы break или continue, чтобы указать, должна ли программа прерывать цикл или продолжать его выполнение.

Синтаксис метки следующий:

метка :
   оператор
Значение метки может быть любым корректным JavaScript индентификатором, не являющимся зарезервированным словом. Оператор, указанный вами после метки может быть любым выражением.

Пример
В этом примере, метка markLoop обозначает цикл while.

markLoop:
while (theMark == true) {
   doSomething();
}
break
Используйте оператор break, чтобы прерывать цикл, переключать управление или в сочетании с оператором метка.

Когда вы используете break без метки, он прерывает циклы while, do-while и for или сразу переключает управление к следующему выражению.
Когда вы используете break с меткой, он прерывает специально отмеченное выражение.
Синтаксис оператора может быть таким:

break;
break Метка;
Первая форма синтаксиса прерывает цикл совсем или переключает управление; вторая прерывает специально обозначенное выражение.

Пример 1
Следующий пример проходит по элементам в массиве, пока не найдёт элемент, чьё значение - theValue:

for (i = 0; i < a.length; i++) {
  if (a[i] == theValue) {
    break;
  }
}
Пример 2: Прерывание метки
var x = 0;
var z = 0
labelCancelLoops: while (true) {
  console.log("Внешний цикл: " + x);
  x += 1;
  z = 1;
  while (true) {
    console.log("Внутренний цикл: " + z);
    z += 1;
    if (z === 10 && x === 10) {
      break labelCancelLoops;
    } else if (z === 10) {
      break;
    }
  }
}

continue

Оператор continue используется, чтобы шагнуть на шаг вперёд в циклах while, do-while, for или перейти к метке.

Когда вы используете continue без метки, он прерывает текущую итерацию циклов while, do-while и for и продолжает выполнение цикла со следующей итерации. В отличие от break, continue не прерывает выполнение цикла полностью. В цикле while он прыгает к условию. А в for увеличивает шаг.
Когда вы используете continue с меткой, он применяется к циклу с этой меткой.
Синтаксис continue может выглядеть так:

continue;
continue Метка;
Пример 1
Следующий пример показывает цикл while с оператором continue, который срабатывает, когда значение i равно 3. Таким образом, n получает значения 1, 3, 7 и 12.

var i = 0;
var n = 0;
while (i < 5) {
  i++;
  if (i == 3) {
    continue;
  }
  n += i;
}
Пример 2
Выражение, отмеченное checkiandj содержит выражение отмеченное checkj. При встрече с continue, программа прерывает текущую итерацию checkj и начинает следующую итерацию. Каждый раз при встрече с continue, checkj переходит на следующую итерацию, пока условие возвращает false. Когда возвращается false, после вычисления остатка от деления checkiandj, checkiandj переходит на следующую итерацию, пока его условие возвращает false. Когда возвращается false, программа продолжает выполнение с выражения после checkiandj.

Если у continue проставлена метка checkiandj, программа может продолжиться с начала метки checkiandj.

checkiandj:
  while (i < 4) {
    console.log(i);
    i += 1;
    checkj:
      while (j > 4) {
        console.log(j);
        j -= 1;
        if ((j % 2) != 0) {
          continue checkj;
        }
        console.log(j + " чётное.");
      }
      console.log("i = " + i);
      console.log("j = " + j);
  }
for...in 
Оператор for...in проходит по всем перечислимым свойствам объекта. JavaScript выполнит указанные выражения для каждого отдельного свойства. Цикл for...in выглядит так:

for (variable in object) {
  выражения
}
Пример
Следующая функция берёт своим аргументом объект и его имя. Затем проходит по всем свойствам объекта и возвращает строку, которая содержит имена свойств и их значения.

function dump_props(obj, obj_name) {
  var result = "";
  for (var i in obj) {
    result += obj_name + "." + i + " = " + obj[i] + "<br>";
  }
  result += "<hr>";
  return result;
}
Для объекта car со свойствами make и model, результатом будет:

car.make = Ford
car.model = Mustang
Пример №2
Также, по ключу можно выводить значение:

let obj = {model: 'AUDI A8', year: '2019', color: 'brown'}

for (key in obj) {
  console.log(`${key} = ${obj[key]}`);
}
// model = AUDI A8
// year = 2019
// color = brown
Массивы
Хотя, очень заманчиво использовать for...in как способ пройтись по всем элементам Array, этот оператор возвращает имя свойств определённых пользователем помимо числовых индексов. Таким образом лучше использовать стандартный for для числовых индексов при взаимодействии с массивами, поскольку оператор for...in проходит по определённым пользователем свойствам в дополнение к элементам массива, если вы изменяете массив, например, добавляете свойства и методы.

Пример
let arr = ['AUDI A8', '2019', 'brown'];
arr.cost = '$100.000';

for (key in arr) {
  console.log(`${key} = ${arr[key]}`);
}

// 0 = AUDI A8
// 1 = 2019
// 2 = brown
// cost = $100.000
for...of
Оператор for...of создаёт цикл, проходящий по перечислимым объектам (включая Array, Map, Set, объект arguments и так далее), вызывая на каждой итерации функцию с выражениями, которые надо выполнить для получения значения каждого отдельного свойства.

for (variable of object) {
  выражения
}
Следующий пример показывает разницу между циклами for...of и for...in. Тогда как for...in проходит по именам свойств, for...of проходит по значениям свойств:

let arr = [3, 5, 7];
arr.foo = "hello";

for (let i in arr) {
   console.log(i); // выводит "0", "1", "2", "foo"
}

for (let i of arr) {
   console.log(i); // выводит "3", "5", "7"
}
*/