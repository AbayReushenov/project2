<?php
echo "<h3>Постфиксный инкремент a++</h3>";
$a = 5;
echo "Должно быть 5: " . $a++ . "<br />\n";
echo "Должно быть 6: " . $a . "<br />\n";

echo "<h3>Префиксный инкремент ++a</h3>";
$a = 5;
echo "Должно быть 6: " . ++$a . "<br />\n";
echo "Должно быть 6: " . $a . "<br />\n";

echo "<h3>Постфиксный декремент a--</h3>";
$a = 5;
echo "Должно быть 5: " . $a-- . "<br />\n";
echo "Должно быть 4: " . $a . "<br />\n";

echo "<h3>Префиксный декремент --а</h3>";
$a = 5;
echo "Должно быть 4: " . --$a . "<br />\n";
echo "Должно быть 4: " . $a . "<br />\n";

echo '== Буквы ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL. "<br />\n";
}
// С цифрами несколько по другому
echo '== Цифры ==' . PHP_EOL. "<br />\n";
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL. "<br />\n";
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL. "<br />\n";
}

// --------------------
// foo() никогда не будет вызвана, т.к. эти операторы являются шунтирующими (short-circuit)

$a = (false && foo());
$b = (true  || foo());
$c = (false and foo());
$d = (true  or  foo());

// --------------------
// "||" имеет больший приоритет, чем "or"

// Результат выражения (false || true) присваивается переменной $e
// Действует как: ($e = (false || true))
$e = false || true;

// Константа false присваивается $f, а затем значение true игнорируется
// Действует как: (($f = false) or true)
$f = false or true;

var_dump($e, $f);

// --------------------
// "&&" имеет больший приоритет, чем "and"

// Результат выражения (true && false) присваивается переменной $g
// Действует как: ($g = (true && false))
$g = true && false;

// Константа true присваивается $h, а затем значение false игнорируется
// Действует как: (($h = true) and false)
$h = true and false;

var_dump($g, $h);

$a = "Привет, ";
echo  "<br />\n".$a. "<br />\n";
$b = $a . "Мир!"; // $b теперь содержит строку "Привет, Мир!"
echo $b. "<br />\n";

$a = "Привет, ";
$b = $a . "Мир!"; // $b теперь содержит строку "Привет, Мир!"
echo $a. "<br />\n";
echo $b. "<br />\n";
$a = "Привет, ";
$a .= "Мир!";     // $a теперь содержит строку "Привет, Мир!"
$a .= "Мир!";     // $a теперь содержит строку "Привет, Мир!"
echo $a. "<br />\n";


$a = array("a" => "apple", "b" => "banana");
$b = array("a" => "pear", "b" => "strawberry", "c" => "cherry");

$c = $a + $b; // Объединение $a и $b
echo "<br />\n"."Объединение \$a и \$b: \n". "<br />\n";
var_dump($c);

$c = $b + $a; // Объединение $b и $a
echo "<br />\n"."Объединение \$b и \$a: \n". "<br />\n";
var_dump($c);

$a += $b; // Объединение $a += $b, это $a и $b
echo "<br />\n"."Объединение \$a += \$b: \n". "<br />\n";
var_dump($a);

echo "<br />\n".$a['a'];
echo "Привет мир!";

// Вместо конкатенации можно предать список аргументов, которые будут объединены
// в одну строку и обработаны как один аргумент
echo 'Эта ', 'строка ', 'была ', 'создана ', 'несколькими параметрами.', chr(10);
echo 'Эта ' . 'строка ' . 'была ' . 'создана ' . 'с помощью конкатенации.' . "\n";

// Следующая строка неверна, так как echo не является функцией
//($some_var) ? echo 'true' : echo 'false';

// Но это можно записать по-другому
($some_var) ? print 'true' : print 'false'; // print также является конструкцией языка,
                                            // но ведет себя как функция, поэтому она
                                            // может быть использована в этом контексте.

echo $some_var ? 'true': 'false'; // echo вынесен за пределы выражения
echo "<br>";
echo "Сумма: ", 4 + 2;
echo "Привет, ", isset($name) ? $name : "незнакомец", "!";
echo "<br>";
$name = "Alexander";
echo 'Сумма: ' . (4 + 2);
echo 'Привет, ' . (isset($name) ? $name : 'незнакомец') . '!';
echo "<br>";
echo "<br>";
$info = array('кофе', 'коричневый', 'кофеин');
echo "<br>";
// Составить список всех переменных
list($drink, $color, $power) = $info;
echo "$drink - $color, а $power делает его особенным.\n";
echo "<br>";
// Составить список только некоторых из них
list($drink, , $power) = $info;
echo "В $drink есть $power.\n";
echo "<br>";
// Или пропустить все, кроме третьей
list( , , $power) = $info;
echo "Мне нужен $power!\n";
echo "<br>";
// list() не работает со строками
list($bar) = "abcde";
var_dump($bar); // NULL
echo "<br>";
$info = array('кофе', 'коричневый', 'кофеин');

list($a[0], $a[1], $a[2]) = $info;

var_dump($a);
?>