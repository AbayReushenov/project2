let x = 1;

x = -x;
alert( x ); // -1, применили унарный минус


let x = 1, y = 3;
alert( y - x ); // 2, бинарный минус


// Обычно при помощи плюса '+' складывают числа.

// Но если бинарный оператор '+' применить к строкам, то он их объединяет в одну:

let s = "моя" + "строка";
alert(s); // моястрока

// Тем не менее, помните, что операции выполняются слева направо. Если перед строкой идут два числа, то числа будут сложены перед преобразованием в строку:

alert(2 + 2 + '1' ); // будет "41", а не "221"

// Сложение и преобразование строк – это особенность бинарного плюса +. Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.

// Например, вычитание и деление:

alert( 2 - '1' ); // 1
alert( '6' / '2' ); // 3


// плюс + ничего не делает с числами. Но если операнд не число, унарный плюс преобразует его в число.

// Например:

// Не влияет на числа
let x = 1;
alert( +x ); // 1

let y = -2;
alert( +y ); // -2

// Преобразует нечисла в числа
alert( +true ); // 1
alert( +"" );   // 0
//как
console.log(Number(true )) // => 1
//, только короче.


let apples = "2";
let oranges = "3";

alert( apples + oranges ); // "23"


// используем унарный плюс, чтобы преобразовать к числу:

let apples = "2";
let oranges = "3";

// оба операнда предварительно преобразованы в числа
alert( +apples + +oranges ); // 5

// более длинный вариант
// alert( Number(apples) + Number(oranges) ); // 5


// Приоритет	Название	Обозначение
// …	…	…
// 16	унарный плюс	+
// 16	унарный минус	-
// 14	умножение	*
// 14	деление	/
// 13	сложение	+
// 13	вычитание	-
// …	…	…
// 3	присваивание	=
// …	…	…

let x = 2 * 2 + 1;

alert( x ); // 5
// Возможно присваивание по цепочке:

let a, b, c;

a = b = c = 2 + 2;

alert( a ); // 4
alert( b ); // 4
alert( c ); // 4

// Такое присваивание работает справа-налево. Сначала вычисляется самое правое выражение 2 + 2, и затем оно присваивается переменным слева: c, b и a. В конце у всех переменных будет одно значение.

// "=" возвращает значение
// Все операторы возвращают значение. Для некоторых это очевидно, например сложение + или умножение *. Но и оператор присваивания не является исключением.

// Вызов x = value записывает value в x и возвращает его.

// Благодаря этому присваивание можно использовать как часть более сложного выражения:

let a = 1;
let b = 2;

let c = 3 - (a = b + 1);

alert( a ); // 3
alert( c ); // 0

// a % b – это остаток от деления a на b.

// Например:

alert( 5 % 2 ); // 1, остаток от деления 5 на 2
alert( 8 % 3 ); // 2, остаток от деления 8 на 3
alert( 6 % 3 ); // 0, остаток от деления 6 на 3

// Возведение в степень **
// Оператор возведения в степень ** недавно добавили в язык.

// Для натурального числа b результат a ** b равен a, умноженному на само себя b раз.

// Например:

alert( 2 ** 2 ); // 4  (2 * 2)
alert( 2 ** 3 ); // 8  (2 * 2 * 2)
alert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)

alert( 4 ** (1/2) ); // 2 (степень 1/2 эквивалентна взятию квадратного корня)
alert( 8 ** (1/3) ); // 2 (степень 1/3 эквивалентна взятию кубического корня)

Инкремент ++ увеличивает на 1:

let counter = 2;
counter++;        // работает как counter = counter + 1, просто запись короче
alert( counter ); // 3
Декремент -- уменьшает на 1:

let counter = 2;
counter--;        // работает как counter = counter - 1, просто запись короче
alert( counter ); // 1

// Операторы ++ и -- могут быть расположены не только после, но и до переменной.

// Когда оператор идёт после переменной – это «постфиксная форма»: counter++.
// «Префиксная форма» – это когда оператор идёт перед переменной: ++counter.
// Обе эти формы записи делают одно и то же: увеличивают counter на 1.

// Есть ли разница между ними? Да, но увидеть её мы сможем, только если будем использовать значение, которое возвращают ++/--.

// Давайте проясним этот момент. Как мы знаем, все операторы возвращают значение. Операторы инкремент/декремент не исключение. Префиксная форма возвращает новое значение, в то время как постфиксная форма возвращает старое (до увеличения/уменьшения числа).

// Чтобы увидеть разницу, вот небольшой пример:


let counter = 1;
let a = ++counter; // (*)
console.log(counter , a) // 2,2 
// alert(a); // 2


// В строке (*) префиксная форма увеличения counter, она возвращает новое значение 2. Так что alert покажет 2.

// Теперь посмотрим на постфиксную форму:

let counter = 1;
let a = counter++; // (*) меняем ++counter на counter++
console.log(counter , a) // 2 , 1


let counter = 1;
alert( 2 * ++counter ); // 4
// Сравните с:

let counter = 1;
alert( 2 * counter++ ); // 2, потому что counter++ возвращает "старое" значение


// Поддерживаются следующие побитовые операторы:

// AND(и) ( & )
// OR(или) ( | )
// XOR(побитовое исключающее или) ( ^ )
// NOT(не) ( ~ )
// LEFT SHIFT(левый сдвиг) ( << )
// RIGHT SHIFT(правый сдвиг) ( >> )
// ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )


// сохранить результат в ней же.

// Например:

let n = 2;
n = n + 5;
n = n * 2;

let n = 2;
n += 5; // теперь n=7 (работает как n = n + 5)
n *= 2; // теперь n=14 (работает как n = n * 2)

alert( n ); // 14

// Оператор запятая
// Оператор «запятая» , редко используется и является одним из самых необычных. Иногда он используется для написания более короткого кода, поэтому нам нужно знать его, чтобы понимать, что при этом происходит.

// Оператор запятая предоставляет нам возможность вычислять несколько выражений, разделяя их запятой ,. Каждое выражение выполняется, но возвращается результат только последнего.

// Например:

let a = (1 + 2, 3 + 4);

alert( a ); // 7 (результат 3 + 4)
// Первое выражение 1 + 2 выполняется, а результат отбрасывается. Затем идёт 3 + 4, выражение выполняется и возвращается результат.
// a = 1 + 2, 3 + 4 => (a = 1 + 2), 3 + 4

// for (a = 1, b = 3, c = a * b; a < 10; a++) {
//     ...
//    }

let a = 2;

let x = 1 + (a *= 2);
// a = 4 (умножено на 2)
// x = 5 (вычислено как 1 + 4)