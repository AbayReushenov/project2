// regexp = new RegExp("шаблон", "флаги");
// …И короткий синтаксис, использующий слеши "/":

// regexp = /шаблон/; // без флагов
// regexp = /шаблон/gmi; // с флагами gmi (будут описаны далее)
// Слеши /.../ говорят JavaScript о том, что это регулярное выражение. Они играют здесь ту же роль, что и кавычки для обозначения строк.

let tag = prompt("Какой тег вы хотите найти?", "h2");

let regexp = new RegExp(`<${tag}>`); // то же, что /<h2>/  при ответе "h2" на prompt выше
console.log(tag)     // h2
console.log(regexp) // /<h2>/

// Флаги
// Регулярные выражения могут иметь флаги, которые влияют на поиск.

// В JavaScript их всего шесть:

// i
// С этим флагом поиск не зависит от регистра: нет разницы между A и a (см. пример ниже).
// g
// С этим флагом поиск ищет все совпадения, без него – только первое.
// m
// Многострочный режим (рассматривается в главе Многострочный режим якорей ^ $, флаг "m").
// s
// Включает режим «dotall», при котором точка . может соответствовать символу перевода строки \n (рассматривается в главе Символьные классы).
// u
// Включает полную поддержку юникода. Флаг разрешает корректную обработку суррогатных пар (подробнее об этом в главе Юникод: флаг "u" и класс \p{...}).
// y
// Режим поиска на конкретной позиции в тексте (описан в главе Поиск на заданной позиции, флаг "y")

// Метод str.match(regexp) для строки str возвращает совпадения с регулярным выражением regexp.

// У него есть три режима работы:

// Если у регулярного выражения есть флаг g, то он возвращает массив всех совпадений:

let str = "Любо, братцы, любо!";

alert( str.match(/любо/gi) ); // Любо,любо (массив из 2х подстрок-совпадений)
// g - все совпадения
// i - не зависит от регистра

// Если такого флага нет, то возвращает только первое совпадение в виде массива, в котором по индексу 0 находится совпадение, и есть свойства с дополнительной информацией о нём:

let str2 = "Любо, братцы, любо!";

let result = str2.match(/любо/i); // без флага g

alert( result[0] );     // Любо (первое совпадение)
alert( result.length ); // 1

// Дополнительная информация:
alert( result.index );  // 0 (позиция совпадения)
alert( result.input );  // Любо, братцы, любо! (исходная строка)
console.log(typeof(result))
// Object
console.log(result) 
// regexp.js:57 ["Любо", index: 0, input: "Любо, братцы, любо!", groups: undefined]

//если совпадений нет, то, вне зависимости от наличия флага g, возвращается null.

let matches = "JavaScript".match(/HTML/); // = null

if (!matches.length) { // Ошибка: у null нет свойства length
  console.log("Ошибка в строке выше");
}

// Если хочется, чтобы результатом всегда был массив, можно написать так:

let matches = "JavaScript".match(/HTML/) || [];

if (!matches.length) {
  console.log("Совпадений нет"); // теперь работает
}

// Замена: str.replace
// Метод str.replace(regexp, replacement) заменяет совпадения с regexp в строке str на replacement (все, если есть флаг g, иначе только первое).

// Например:

// без флага g
console.log( "We will, we will".replace(/we/i, "I") ); // I will, we will

// с флагом g
console.log( "We will, we will".replace(/we/ig, "I") ); // I will, I will

// В строке замены replacement мы можем использовать специальные комбинации символов для вставки фрагментов совпадения:

// Спецсимволы	Действие в строке замены
// $&	вставляет всё найденное совпадение
// $`	вставляет часть строки до совпадения
// $'	вставляет часть строки после совпадения
// $n	если n это 1-2 значное число, вставляет содержимое n-й скобочной группы регулярного выражения, больше об этом в главе Скобочные группы
// $<name>	вставляет содержимое скобочной группы с именем name, также изучим в главе Скобочные группы
// $$	вставляет символ "$"
// Пример с $&:

console.log( "Люблю HTML".replace(/HTML/, "$& и JavaScript") ); // Люблю HTML и JavaScript
// $&	вставляет всё найденное совпадение

// Проверка: regexp.test
// Метод regexp.test(str) проверяет, есть ли хоть одно совпадение, если да, то возвращает true, иначе false.

let str = "Я ЛюБлЮ JavaScript";
let regexp = /люблю/i;

console.log( regexp.test(str) ); // true

// Регулярное выражение состоит из шаблона и необязательных флагов: g, i, m, u, s, y.
// Без флагов и специальных символов, которые мы изучим позже, поиск по регулярному выражению аналогичен поиску подстроки.
// Метод str.match(regexp) ищет совпадения: все, если есть флаг g, иначе только первое.
// Метод str.replace(regexp, replacement) заменяет совпадения с regexp на replacement: все, если у регулярного выражения есть флаг g, иначе только первое.
// Метод regexp.test(str) возвращает true, если есть хоть одно совпадение, иначе false.

// При использовании функции-конструктора необходимо использовать обычные правила экранирования в строках (предварять специальные символы символом обратного слеша «\»). Например, следующие выражения эквивалентны:

var re = /\w+/;
var re = new RegExp('\\w+');