import $ from 'jquery';

$(document).ready(function() {
    $('.list-item:first').hover(function() {
        $(this).toggleClass('active');
    });

    $('.list-item:eq(2)').on('click', function() {
        $('.image:even').fadeToggle("slow");
    });

    $('.list-item:eq(4)').on('click', function() {
        $('.image:odd').animate({
            opacity: "toggle",
            height: "toggle" 
        }, 2000);
        // .animate(properties, [duration], [easing], [callback]):jQuery
    });
});

// http://jquery.page2page.ru/index.php5/

// const btn = $('#btn');

// console.log(btn);
// mistake

// 2 , after: import $ from 'jquery';
// C.fn.init [button#btn.list-item]
// 0: button#btn.list-item
// length: 1
// __proto__: Object(0)

// someSelector:eq(index)v:1.0
// Соответствует элементу, занимающему позицию под номером index, среди уже выбранных с помощью селектора someSelector элементов. Нумерация элементов начинается с 0.

// Начиная с jQuery-1.8, можно выбирать элементы с конца, указывая отрицательный index. -1 — последний элемент, -2 — предпоследний и т. д. Отметим, что одноименный метод — .eq() может принимать отрицательные значения во всех версиях jQuery.

// Примеры использования:

// $('div:eq(0)')	вернет первый div-элемент на странице.
// on() 

// .click()
// Устанавливает обработчик "клика" мышью по элементу, либо, запускает это событие. Метод имеет три варианта использования:

// .click(handler(eventObject)):jQueryv:1.0
// Устанавливает функцию handler в качестве обработчика события click, на выбранные элементы страницы.
// Метод является аналогом bind("click", handler(eventObject)).
// handler(eventObject) — функция, которая будет установлена в качестве обработчика. При вызове она будет получать объект события eventObject.

// .on()
// Устанавливает обработчики событий на выбранные элементы страницы. Имеет два варианта использования:

// .on(events, [selector], [data], handler):jQueryv:1.7
// events — тип(ы) обрабатываемых событий. Например "click", "resize" и.т.д. (список всех событий см. ниже). Если необходимо привязать обработчик сразу на несколько типов событий, нужно перечислить их через пробел: "click resize ..."
// selector — селектор по которому будут фильтроваться элементы, лежащие внутри уже найденных. В итоге, обработчик будет срабатывать только в том случае, если событие «поднялось» от одного из отфильтрованных элементов.
// data — данные, передаваемые обработчику событий. В обработчике будут доступны в переменной event.data.
// handler — функция, которая будет установлена в качестве обработчика. Вместо функции, можно указать значение false, это будет эквивалентно установке такой функции: function(){return false;}.

// :evenv:1.0
// Соответствует элементам с четными номерами позиций, в наборе выбранных элементов.(вариант с нечетными — :odd). Поскольку счет элементов начинается с 0, :even будет соответствовать первому, третьему и т. д. элементам.

// Примеры использования:

// $('.lBox:even')	вернет все четные элементы, с классом lBox.

// animation
// Готовые анимации
// .hide()
// .show()
// .slideUp()
// .slideDown()
// .slideToggle()
// .fadeIn()
// .fadeOut()
// .fadeTo()
// .fadeToggle()

// Поочередное появление и скрытие элементов
// << Эффекты
// .fadeToggle()
// Вызов этого метода приводит к плавному исчезновению (если элемент не скрыт) или появлению (если элемент скрыт) выбранных элементов на странице, за счет изменения прозрачности. Отметим, что после скрытия элемента, его css-свойство display становится равным none, а перед появлением, оно получает свое прежнее значение обратно. Метод имеет один вариант использования:

// .fadeToggle([duration],[easing],[callback]):jQueryv:1.4.4
// duration — продолжительность выполнения анимации (появления или скрытия). Может быть задана в миллисекундах или строковым значением 'fast' или 'slow' (200 и 600 миллисекунд). По умолчанию, анимация будет происходить за 400 миллисекунд.
// easing — изменение скорости анимации (будет ли она замедляется к концу выполнения или наоборот ускорится). (см. описание)
// callback — функция, заданная в качестве обработчика завершения анимации (появления или скрытия). Ей не передается никаких параметров, однако, внутри функции, переменная this будет содержать DOM-объект анимируемого элемента. Если таких элементов несколько, то обработчик будет вызван отдельно, для каждого элемента.

// Примеры использования:

// $("#leftFit").fadeToggle()

// .animate()
// Выполняет заданную пользователем анимацию, с выбранными элементами. Анимация происходит за счет плавного изменения CSS-свойств у элементов. Функция имеет два варианта использования:

// .animate(properties, [duration], [easing], [callback]):jQueryv:1.0
// properties — список CSS-свойств, участвующих в анимации и их конечных значений. (см. описание ниже)
// duration — продолжительность выполнения анимации. Может быть задана в миллисекундах или строковым значением 'fast' или 'slow' (200 и 600 миллисекунд).
// easing — изменение скорости анимации (будет ли она замедляется к концу выполнения или наоборот ускорится). (см. описание ниже)
// callback — функция, которая будет вызвана после завершения анимации.

// .animate(properties, options):jQueryv:1.0
// properties — список CSS-свойств, участвующих в анимации и их конечных значений. (см. описание ниже)
// options — дополнительные опции. Должны быть представлены объектом, в формате опция:значение. Варианты опций:

// duration — продолжительность выполнения анимации (см. выше).
// easing — изменение скорости анимации (будет ли она замедляется к концу выполнения или наоборот ускориться). (см. описание ниже)
// complete — функция, которая будет вызвана после завершения анимации.
// step — функция, которая будет вызвана после каждого шага анимации.
// queue — булево значение, указывающее, следует ли помещать текущую анимацию в очередь функций. В случае false, анимация будет запущена сразу же, не вставая в очередь.
// specialEasing — позволяет установить разные значения easing, для разных CSS-параметров. Задается объектом, в формате параметр:значение. Опция была добавлена в jQuery 1.4.

// $("#my-div").animate({height: "hide"}, 1000);
//   $("#my-div").animate({height: "show"}, 1000);